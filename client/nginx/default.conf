limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

server {
    listen 8080;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    resolver 127.0.0.11 ipv6=off;

    include mime.types;

    types {
      font/woof woof;
    }

    default_type application/octet-stream;

    client_max_body_size        100M;
    set $backend_server         server:3000;

    # These are the HTTP methods that are allowed.
    if ( $request_method !~ ^(GET|POST|PUT)$ ) {
        return 405;
    }

    # Enable compression
    gzip on;
    gzip_types      text/css text/plain text/xml application/xml application/javascript application/x-javascript text/javascript application/json text/x-json;
    gzip_disable     "MSIE [1-6]\.";

    # don't send the nginx version number in error pages and Server header
    server_tokens off;
    # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
    # you can tell the browser that it can only download content from the domains you explicitly allow
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval';  style-src 'self' 'unsafe-inline'; img-src 'self' blob: data:; frame-ancestors 'self';";
    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    add_header X-Content-Type-Options nosniff;
    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN;
    # The HTTP Strict-Transport-Security response header (often abbreviated as HSTS)
    # lets a web site tell browsers that it should only be accessed using HTTPS, instead of using HTTP.
    add_header Strict-Transport-Security "max-age=31536000";
    # Do not allow browser caching with Cache-control and Pragma
    add_header Cache-Control "no-store";
    add_header Pragma "no-cache";
    # The HTTP X-XSS-Protection response header is a feature of Internet Explorer, Chrome and Safari
    # that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
    add_header "X-XSS-Protection" "1; mode=block";

    location ^~ /api/ {
        limit_req zone=mylimit burst=20;
        client_max_body_size    20M;
        proxy_pass              http://$backend_server;
        proxy_ssl_protocols     TLSv1 TLSv1.1 TLSv1.2 SSLv3;
        proxy_ssl_name          $backend_server;
        proxy_ssl_server_name   on;
        proxy_set_header        Host $backend_server;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Host $server_name;
        proxy_pass_header       Server;
    }

    location / {
        limit_req zone=mylimit burst=20;
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html =404;
    }
}